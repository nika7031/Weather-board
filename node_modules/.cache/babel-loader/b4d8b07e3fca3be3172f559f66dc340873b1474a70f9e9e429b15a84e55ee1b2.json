{"ast":null,"code":"var _jsxFileName = \"/Users/parnikasharma/weather-app/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  onSearchChange\n}) => {\n  _s();\n  /*onSearchChange is prop*/\n\n  const [search, setSearch] = useState(null);\n  const loadOptions = inputvalue => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputvalue}`, geoApiOptions) /*ADDing geo.. so that its easier to implement variables*/\n    /*minPopulation=1000000: This query parameter filters the cities to only those with a population of at least 1,000,000.*/\n    /*namePrefix=${inputValue}: This query parameter filters cities whose names start with the inputValue provided by the user.*/.then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}` //is used to define a label for an <input> element in a form.\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate /*only component we will use here and it has parametres*/, {\n    placeholder: \"Search for city\" /*The placeholder attribute specifies a short hint that describes the expected value of a text field.*/,\n    debounceTimeout: 600 /*controlling the frequency at which time-consuming tasks are triggered.*/,\n    value: search,\n    onChange: handleOnChange /*React onChange is an event handler that triggers when there is any change in the input field.*/,\n    loadOptions: loadOptions /*The function to call for loading options.*/\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsxDEV","_jsxDEV","Search","onSearchChange","_s","search","setSearch","loadOptions","inputvalue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","error","handleOnChange","searchData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parnikasharma/weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  /*onSearchChange is prop*/\n\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = (inputvalue) => {\n    return (\n      fetch(\n        `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputvalue}`,\n        geoApiOptions\n      ) /*ADDing geo.. so that its easier to implement variables*/\n        /*minPopulation=1000000: This query parameter filters the cities to only those with a population of at least 1,000,000.*/\n        /*namePrefix=${inputValue}: This query parameter filters cities whose names start with the inputValue provided by the user.*/\n        .then((response) => response.json())\n        .then((response) => {\n          return {\n            options: response.data.map((city) => {\n              return {\n                value: `${city.latitude} ${city.longitude}`,\n                label: `${city.name}, ${city.countryCode}`, //is used to define a label for an <input> element in a form.\n              };\n            }),\n          };\n        })\n        .catch((err) => console.error(err))\n    );\n  };\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate /*only component we will use here and it has parametres*/\n      placeholder=\"Search for city\" /*The placeholder attribute specifies a short hint that describes the expected value of a text field.*/\n      debounceTimeout={\n        600\n      } /*controlling the frequency at which time-consuming tasks are triggered.*/\n      value={search}\n      onChange={\n        handleOnChange\n      } /*React onChange is an event handler that triggers when there is any change in the input field.*/\n      loadOptions={loadOptions} /*The function to call for loading options.*/\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACrC;;EAEA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMW,WAAW,GAAIC,UAAU,IAAK;IAClC,OACEC,KAAK,CACH,GAAGX,WAAW,4CAA4CU,UAAU,EAAE,EACtET,aACF,CAAC,CAAC;IACA;IACA,8HACCW,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO;QACLE,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;UACnC,OAAO;YACLC,KAAK,EAAE,GAAGD,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACG,SAAS,EAAE;YAC3CC,KAAK,EAAE,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,WAAW,EAAE,CAAE;UAC9C,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EAEzC,CAAC;EACD,MAAMG,cAAc,GAAIC,UAAU,IAAK;IACrCtB,SAAS,CAACsB,UAAU,CAAC;IACrBzB,cAAc,CAACyB,UAAU,CAAC;EAC5B,CAAC;EAED,oBACE3B,OAAA,CAACJ,aAAa,CAAC;IACbgC,WAAW,EAAC,iBAAiB,CAAC;IAC9BC,eAAe,EACb,GACD,CAAC;IACFb,KAAK,EAAEZ,MAAO;IACd0B,QAAQ,EACNJ,cACD,CAAC;IACFpB,WAAW,EAAEA,WAAY,CAAC;EAAA;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEN,CAAC;AAAC/B,EAAA,CA7CIF,MAAM;AAAAkC,EAAA,GAANlC,MAAM;AA+CZ,eAAeA,MAAM;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}