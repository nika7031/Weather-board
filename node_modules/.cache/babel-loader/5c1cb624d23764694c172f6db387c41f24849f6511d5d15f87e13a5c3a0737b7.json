{"ast":null,"code":"var _jsxFileName = \"/Users/parnikasharma/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Search from './components/search/search';\nimport CurrentWeather from './components/current-weather/current-weather';\nimport { WEATHER_API_URL, WEATHER_API_KEY } from './api';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const CurrentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\n    const ForecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\n    Promise.all([CurrentWeatherFetch, ForecastFetch]) /*order in which we write it is imp,results return same*/.then(async response => {\n      const weatherResponse = await response[0].json();\n      const forecastResponse = await response[1].json(); //here 0,1 are indexing\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      }); //This is the spread syntax. It copies all enumerable properties from the AppweatherResponse object into the new object\n      setForecast({\n        city: searchData.label,\n        ...forecastResponse\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrentWeather, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","CurrentWeather","WEATHER_API_URL","WEATHER_API_KEY","useState","jsxDEV","_jsxDEV","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","handleOnSearchChange","searchData","lat","lon","value","split","CurrentWeatherFetch","fetch","ForecastFetch","Promise","all","then","response","weatherResponse","json","forecastResponse","city","label","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parnikasharma/weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Search from './components/search/search';\nimport CurrentWeather from './components/current-weather/current-weather';\nimport { WEATHER_API_URL, WEATHER_API_KEY } from './api';\nimport { useState } from 'react';\n\n\nfunction App() {\n\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const CurrentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`);\n    const ForecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}`)\n\n    Promise.all([CurrentWeatherFetch, ForecastFetch])/*order in which we write it is imp,results return same*/\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forecastResponse = await response[1].json();//here 0,1 are indexing\n        setCurrentWeather({city: searchData.label, ...weatherResponse});//This is the spread syntax. It copies all enumerable properties from the AppweatherResponse object into the new object\n        setForecast({city: searchData.label, ...forecastResponse});\n      })\n  }\n  return (\n    <div className=\"container\">\n      <Search onSearchChange={handleOnSearchChange} />\n      <CurrentWeather />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,cAAc,MAAM,8CAA8C;AACzE,SAASC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACxD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMS,oBAAoB,GAAIC,UAAU,IAAK;IAC3C,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,UAAU,CAACG,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;IAE9C,MAAMC,mBAAmB,GAAGC,KAAK,CAAC,GAAGlB,eAAe,gBAAgBa,GAAG,QAAQC,GAAG,UAAUb,eAAe,EAAE,CAAC;IAC9G,MAAMkB,aAAa,GAAGD,KAAK,CAAC,GAAGlB,eAAe,iBAAiBa,GAAG,QAAQC,GAAG,UAAUb,eAAe,EAAE,CAAC;IAEzGmB,OAAO,CAACC,GAAG,CAAC,CAACJ,mBAAmB,EAAEE,aAAa,CAAC,CAAC,2DAC9CG,IAAI,CAAC,MAAOC,QAAQ,IAAK;MACxB,MAAMC,eAAe,GAAG,MAAMD,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;MAChD,MAAMC,gBAAgB,GAAG,MAAMH,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;MAClDjB,iBAAiB,CAAC;QAACmB,IAAI,EAAEf,UAAU,CAACgB,KAAK;QAAE,GAAGJ;MAAe,CAAC,CAAC,CAAC;MAChEd,WAAW,CAAC;QAACiB,IAAI,EAAEf,UAAU,CAACgB,KAAK;QAAE,GAAGF;MAAgB,CAAC,CAAC;IAC5D,CAAC,CAAC;EACN,CAAC;EACD,oBACEtB,OAAA;IAAKyB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB1B,OAAA,CAACN,MAAM;MAACiC,cAAc,EAAEpB;IAAqB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChD/B,OAAA,CAACL,cAAc;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV;AAAC7B,EAAA,CAzBQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA2BZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}