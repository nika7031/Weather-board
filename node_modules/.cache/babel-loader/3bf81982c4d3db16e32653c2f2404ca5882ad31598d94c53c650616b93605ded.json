{"ast":null,"code":"import\"./App.css\";import Search from\"./components/search/search\";import CurrentWeather from\"./components/current-weather/current-weather\";import{WEATHER_API_URL,WEATHER_API_KEY}from\"./api\";import{useState}from\"react\";import Forecast from\"./components/forecast/forecast\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentWeather,setCurrentWeather]=useState(null);const[forecast,setForecast]=useState(null);const handleOnSearchChange=searchData=>{const[lat,lon]=searchData.value.split(\" \");const CurrentWeatherFetch=fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);const ForecastFetch=fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);Promise.all([CurrentWeatherFetch,ForecastFetch])/*order in which we write it is imp,results return same*/.then(async response=>{const weatherResponse=await response[0].json();const forecastResponse=await response[1].json();//here 0,1 are indexing\nsetCurrentWeather({city:searchData.label,...weatherResponse});//This is the spread syntax. It copies all enumerable properties from the AppweatherResponse object into the new object\nsetForecast({city:searchData.label,...forecastResponse});}).catch(err=>console.log(err));};console.log(currentWeather);console.log(forecast);return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Search,{onSearchChange:handleOnSearchChange}),currentWeather&&/*#__PURE__*/_jsx(CurrentWeather,{data:currentWeather}),forecast&&/*#__PURE__*/_jsx(Forecast,{data:forecast})]});}export default App;","map":{"version":3,"names":["Search","CurrentWeather","WEATHER_API_URL","WEATHER_API_KEY","useState","Forecast","jsx","_jsx","jsxs","_jsxs","App","currentWeather","setCurrentWeather","forecast","setForecast","handleOnSearchChange","searchData","lat","lon","value","split","CurrentWeatherFetch","fetch","ForecastFetch","Promise","all","then","response","weatherResponse","json","forecastResponse","city","label","catch","err","console","log","className","children","onSearchChange","data"],"sources":["/Users/parnikasharma/weather-board/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport { useState } from \"react\";\nimport Forecast from \"./components/forecast/forecast\";\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const CurrentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const ForecastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([\n      CurrentWeatherFetch,\n      ForecastFetch,\n    ]) /*order in which we write it is imp,results return same*/\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forecastResponse = await response[1].json(); //here 0,1 are indexing\n        setCurrentWeather({ city: searchData.label, ...weatherResponse }); //This is the spread syntax. It copies all enumerable properties from the AppweatherResponse object into the new object\n        setForecast({ city: searchData.label, ...forecastResponse });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  console.log(currentWeather);\n  console.log(forecast);\n  return (\n    <div className=\"container\">\n      <Search onSearchChange={handleOnSearchChange} />\n      {currentWeather && <CurrentWeather data={currentWeather} />}\n      {forecast && <Forecast data={forecast} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,WAAW,CAClB,MAAO,CAAAA,MAAM,KAAM,4BAA4B,CAC/C,MAAO,CAAAC,cAAc,KAAM,8CAA8C,CACzE,OAASC,eAAe,CAAEC,eAAe,KAAQ,OAAO,CACxD,OAASC,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,QAAQ,KAAM,gCAAgC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACS,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAE9C,KAAM,CAAAW,oBAAoB,CAAIC,UAAU,EAAK,CAC3C,KAAM,CAACC,GAAG,CAAEC,GAAG,CAAC,CAAGF,UAAU,CAACG,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAE9C,KAAM,CAAAC,mBAAmB,CAAGC,KAAK,CAC/B,GAAGpB,eAAe,gBAAgBe,GAAG,QAAQC,GAAG,UAAUf,eAAe,eAC3E,CAAC,CACD,KAAM,CAAAoB,aAAa,CAAGD,KAAK,CACzB,GAAGpB,eAAe,iBAAiBe,GAAG,QAAQC,GAAG,UAAUf,eAAe,eAC5E,CAAC,CAEDqB,OAAO,CAACC,GAAG,CAAC,CACVJ,mBAAmB,CACnBE,aAAa,CACd,CAAE,0DACAG,IAAI,CAAC,KAAO,CAAAC,QAAQ,EAAK,CACxB,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAAD,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAChD,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAH,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAAE;AACnDjB,iBAAiB,CAAC,CAAEmB,IAAI,CAAEf,UAAU,CAACgB,KAAK,CAAE,GAAGJ,eAAgB,CAAC,CAAC,CAAE;AACnEd,WAAW,CAAC,CAAEiB,IAAI,CAAEf,UAAU,CAACgB,KAAK,CAAE,GAAGF,gBAAiB,CAAC,CAAC,CAC9D,CAAC,CAAC,CACDG,KAAK,CAAEC,GAAG,EAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC,CACrC,CAAC,CAEDC,OAAO,CAACC,GAAG,CAACzB,cAAc,CAAC,CAC3BwB,OAAO,CAACC,GAAG,CAACvB,QAAQ,CAAC,CACrB,mBACEJ,KAAA,QAAK4B,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB/B,IAAA,CAACP,MAAM,EAACuC,cAAc,CAAExB,oBAAqB,CAAE,CAAC,CAC/CJ,cAAc,eAAIJ,IAAA,CAACN,cAAc,EAACuC,IAAI,CAAE7B,cAAe,CAAE,CAAC,CAC1DE,QAAQ,eAAIN,IAAA,CAACF,QAAQ,EAACmC,IAAI,CAAE3B,QAAS,CAAE,CAAC,EACtC,CAAC,CAEV,CAEA,cAAe,CAAAH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}