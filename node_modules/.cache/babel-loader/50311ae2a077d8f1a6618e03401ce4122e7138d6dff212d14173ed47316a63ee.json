{"ast":null,"code":"import{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{GEO_API_URL,geoApiOptions}from\"../../api\";import{jsx as _jsx}from\"react/jsx-runtime\";const Search=_ref=>{let{onSearchChange}=_ref;/* onSearchChange is a prop */const[search,setSearch]=useState(null);const loadOptions=async inputValue=>{try{const response=await fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,geoApiOptions);const data=await response.json();return{options:data.data.map(city=>({value:`${city.latitude} ${city.longitude}`,label:`${city.name}, ${city.countryCode}`})),hasMore:false,additional:{}};}catch(error){console.error('Error loading options:',error);return{options:[],hasMore:false,additional:{}};}};const handleOnChange=searchData=>{setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for city\",debounceTimeout:600,value:search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsx","_jsx","Search","_ref","onSearchChange","search","setSearch","loadOptions","inputValue","response","fetch","data","json","options","map","city","value","latitude","longitude","label","name","countryCode","hasMore","additional","error","console","handleOnChange","searchData","placeholder","debounceTimeout","onChange"],"sources":["/Users/parnikasharma/weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  /* onSearchChange is a prop */\n\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = async (inputValue) => {\n    try {\n      const response = await fetch(\n        `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n        geoApiOptions\n      );\n      const data = await response.json();\n\n      return {\n        options: data.data.map((city) => ({\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.countryCode}`,\n        })),\n        hasMore: false, \n        additional: {}, \n      };\n    } catch (error) {\n      console.error('Error loading options:', error);\n      return {\n        options: [],\n        hasMore: false,\n        additional: {},\n      };\n    }\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,WAAW,CAAEC,aAAa,KAAQ,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvD,KAAM,CAAAC,MAAM,CAAGC,IAAA,EAAwB,IAAvB,CAAEC,cAAe,CAAC,CAAAD,IAAA,CAChC,8BAEA,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAE1C,KAAM,CAAAW,WAAW,CAAG,KAAO,CAAAC,UAAU,EAAK,CACxC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAC1B,GAAGZ,WAAW,4CAA4CU,UAAU,EAAE,CACtET,aACF,CAAC,CACD,KAAM,CAAAY,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAElC,MAAO,CACLC,OAAO,CAAEF,IAAI,CAACA,IAAI,CAACG,GAAG,CAAEC,IAAI,GAAM,CAChCC,KAAK,CAAE,GAAGD,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACG,SAAS,EAAE,CAC3CC,KAAK,CAAE,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,WAAW,EAC1C,CAAC,CAAC,CAAC,CACHC,OAAO,CAAE,KAAK,CACdC,UAAU,CAAE,CAAC,CACf,CAAC,CACH,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,CACLX,OAAO,CAAE,EAAE,CACXS,OAAO,CAAE,KAAK,CACdC,UAAU,CAAE,CAAC,CACf,CAAC,CACH,CACF,CAAC,CAED,KAAM,CAAAG,cAAc,CAAIC,UAAU,EAAK,CACrCrB,SAAS,CAACqB,UAAU,CAAC,CACrBvB,cAAc,CAACuB,UAAU,CAAC,CAC5B,CAAC,CAED,mBACE1B,IAAA,CAACJ,aAAa,EACZ+B,WAAW,CAAC,iBAAiB,CAC7BC,eAAe,CAAE,GAAI,CACrBb,KAAK,CAAEX,MAAO,CACdyB,QAAQ,CAAEJ,cAAe,CACzBnB,WAAW,CAAEA,WAAY,CAC1B,CAAC,CAEN,CAAC,CAED,cAAe,CAAAL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}